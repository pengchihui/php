基本内置函数
输出打印
print("3.2") ;//只输出
print_r(array("a","b","c"));//将数组的键值与元素依次显示
var_dump(true); //输出参数的具体数据类型以及值

printf("%d","3.2") ;//即格式化，又输出
sprintf("%d","3.2") ;//只格式化，返回格式化后的字符串，不输出。

%% - 返回一个百分号 %
%b - 二进制数
%c - ASCII 值对应的字符
%d - 包含正负号的十进制数（负数、0、正数）
%e - 使用小写的科学计数法（例如 1.2e+2）
%E - 使用大写的科学计数法（例如 1.2E+2）
%u - 不包含正负号的十进制数（大于等于 0）
%f - 浮点数（本地设置）
%F - 浮点数（非本地设置）
%g - 较短的 %e 和 %f
%G - 较短的 %E 和 %f
%o - 八进制数
%s - 字符串
%x - 十六进制数（小写字母）
%X - 十六进制数（大写字母）
注意： echo 不是函数，是语言结构；


时间
time(); //返回自从 Unix 纪元（格林威治时间 1970 年 1 月 1 日 00:00:00）到当前时间的秒数
mktime(); //取得一个日期的 Unix 时间戳
//格式化时间 y返回年最后两位，Y年四位数，m月份数字，M月份英文。d月份几号数字
$date=date("Y-m-d");
$date=date("Y-m-d H:i:s");//带时分秒
//获取七天后的时间
$nextWeek = time() + (7 * 24 * 60 * 60); // 7 天 24 小时; 60 分钟 60 秒
echo 'Now: '. date('Y-m-d') ."<br>";
echo 'Next Week: '. date('Y-m-d', $nextWeek) ."<br>";
时间格式
Y - 年，四位数字; 如: "1999"
y - 年，二位数字; 如: "99"
m - 月份，二位数字，若不足二位则在前面补零; 如: "01" 至 "12"
n - 月份，二位数字，若不足二位则不补零; 如: "1" 至 "12"
M - 月份，三个英文字母; 如: "Jan"
F - 月份，英文全名; 如: "January"
d - 几日，二位数字，若不足二位则前面补零; 如: "01" 至 "31"
j - 几日，二位数字，若不足二位不补零; 如: "1" 至 "31"
h - 12 小时制的小时; 如: "01" 至 "12"
H - 24 小时制的小时; 如: "00" 至 "23"
g - 12 小时制的小时，不足二位不补零; 如: "1" 至 12"
G - 24 小时制的小时，不足二位不补零; 如: "0" 至 "23"
i - 分钟; 如: "00" 至 "59"
s - 秒; 如: "00" 至 "59"
a - "am" 或是 "pm"
A - "AM" 或是 "PM"
D - 星期几，三个英文字母; 如: "Fri"
l - 星期几，英文全名; 如: "Friday"
w - 数字型的星期几，如: "0" (星期日) 至 "6" (星期六)
z - 一年中的第几天; 如: "0" 至 "365"
t - 指定月份的天数; 如: "28" 至 "31"
U - 总秒数



数学  Math

abs(): 求绝对值
$abs = abs(-4.2); //4.2 数字绝对值数字

ceil(): 向上取整
echo ceil(9.999);
echo ceil(-9.999);

floor(): 向下取整
echo floor(9.999);
echo floor(-9.999);

intval(): 丢弃小数，只保留整数
echo intval(9.999);
echo intval(-9.999);


round(): 四舍五入
echo round(9.599);
echo round(9.499);
echo round(1.95583, 2); // 1.96, 一个数值|保留小数点后多少位,默认为0 舍入后的结果

pow(): 返回数的n次方
 echo pow(-1, 20); // 1 基础数|n次方乘方值.round(): 浮点数四舍五入
 


sqrt(): 求平方根
 echo sqrt(9); //3 被开方的数平方根



max(): 求最大值
 echo max(1, 3, 5, 6, 7); // 7
//多个数字或数组 返回其中的最大值
 echo max(array(2, 4, 5)); // 5

min(): 求最小值
输入: 多个数字或数组
输出: 返回其中的最小值


rand(): 随机数 输入: 最小|最大, 输出: 随机数随机返回范围内的值
mt_rand(): 更好的随机数
输入: 最小|最大, 输出: 随机数随机返回范围内的值
 echo mt_rand(0,9);//n



pi(): 获取圆周率值









3.2.字符串  string

//获取字符串长度，有多少个字符，空格也算
$str=" sdaf sd ";
$len=strlen($str);



//字符串分割方法，返回一个数组，用第一个参数里的字符分割后面的字符串，指定字符的前后和之间都截取
，如果指定字符在开头或结尾则返回的数组开头或结尾的元素为空字符串
6
//没有分割到字符串就返回给数组对应元素一个空值。最后一个限制返回数组长度，可不限制，则一直分割下
去。
$array=explode("a","asddad addsadassd dasdadfsdfasdaaa",4);
//print_r($array);




//剔除字符串左边开头的空格,并返回
//如有第二个参数，则是剔除第二个参数里的字符串
$str=ltrim("a asd ","a");



//剔除字符串右边开头的空格
$str=rtrim(" asd ");


//把第一个字符串两边以第二个参数开头的字符串剔除。如没有第二个参数，默认剔除掉字符串两边开头的空
格
$str=trim("a sdsdfas a","a");



//从字符串第一个参数里的指定位置开始取多长(多少个)字符，字符串中第一个字符位置从0算。
//如果第二个参数为负则从字符串结尾倒数第几个开始取多长的字符串。结尾最后一个字符算-
1，截取方向总是从左到右
$str=substr("abcdefgh",0,4);



//将第三个参数的第一个参数字符串用参数二字符串替换
$str=str_replace("a","1","abcabcAbca");
//与str_replace用法同，只是不区分大小写
//$str=str_ireplace("a"," ","abcabcAbca");


//返回括号里字符串的字符全部大写的字符串
$str=strtoupper("sdaf");


//将括号里第一个字符串变成大写后返回
$str=ucfirst("asdf");




**********************
//用echo等将括号里字符串打印在网页上时原汁原味打印出括号里的字符串，包括标签字符
$str=htmlentities(" ");




//返回第二个参数字符串在第一个字符串里出现的次数
$int=substr_count("abcdeabcdeablkabd","ab");


//返回第二个字符串在第一个字符串第一次出现的位置，第一个字符位置算0
$int=strpos("asagaab","ab");



//返回第二个字符串在第一个字符串最后一次出现的位置，第一个字符位置算0
$int=strrpos("asagaabadfab","ab");

//截取返回参数一中从左至右第一个出现的参数二到参数一最后一个字符的字符串
$str=strstr("sdafsdgaababdsfgs","ab");

//截取返回参数一中从左至右最后一个出现的参数二到参数一最后一个字符的字符串
$str=strrchr("sdafsdgaababdsfgs","ab");

//将参数二中每一个字符在参数一中相同字符前加"\"
$str=addcslashes("abcdefghijklmn","akd");




//将参数一的字符串填充到参数二指定的长度(单字符个数)，参数三为指定填充的字符串，不写默认空格
//参数四填充位置，0在参数一左侧开头填充，1右侧开头，2两边开头同时。不写默认在右侧开头填充
$str=str_pad("abcdefgh",10,"at",0);


//依次比较两字符串对应字符阿斯克码值，第一对不一样的，如果参数一里大于参数二里的返回1,反之返回-
1，两字符串完全一样返回0
$int1=strcmp("b","a");



//返回第一个参数格式化后的数字格式，第二个参数为保留几个小数，参数三为将小数点换成参数三，参数四
为整数部分每三位用什么字符分割
//后面三个参数都不写，则默认去掉小数部分，整数每隔三位用逗号,分割。参数三，参数四必须同时存在
$str=number_format(1231233.1415,2,"d","a");









数组

$arr=array("k0"=>"a","k1"=>"b","k2"=>"c");



//返回数组元素个数
$int=count($arr);



//用第一个参数里的字符串，把后面数组里的每个元素连接起来，返回一个字符串。
$str=implode("-",array("a","b","c"));


//判断第二参数的数组元素中是否有第一个参数元素
$bool=in_array("b",$arr);


//返回括号中数组所有键值组成的新数组原数组不改变
$array=array_keys($arr);


//判断第二个参数的数组中是否有第一个参数的键值，返回真假
$bool=array_key_exists("k1",$arr);


//返回原数组中所有元素值组成的新数组，键值从0开始自增，原数组不变
$array=array_values($arr);



//返回当前数组指针指向的键值
$key=key($arr);



//返回当前数组指针指向的元素值
$value=current($arr);

//返回当前数组指针指向元素的键值及元素值组成的数组，再将指针推向下一位，最后指针指向的是一个空元
素返回空
//返回的数组中有四个固定键值对应的元素值，分别是返回元素的键值及元素值，其中0,'key'键值都对应返回
元素键值，1,'value'键值都对应返回的元素值
$array=each($arr);


//先将数组指针推向下一位，再返回指针移动后指向的元素值
$value=next($arr);


//将数组指针推向上一位，再返回指针移动后指向的元素值
$value=prev($arr);

//让数组指针重置指向第一个元素并返回元素值
$value=reset($arr);


//将数组指针指向最后一位元素，并返回最后一位元素值
$value=end($arr);

//将第一个参数以后的参数作为元素追加入第一个参数数组的末尾，索引从最小的没用过的数值开始计，返回
之后的数组长度
$int=array_push($arr,"d","dfsd");



//将第一个参数数组后面所有参数作为元素添加到第一个参数数组开头处，键值以0从第一个元素处重新累加
，原非数值的键值保持不变，原元素排序位置不变，返回之后的数组长度
$int=array_unshift($arr,"t1","t2");


//返回从数组尾部提取最后一个元素值，并把最后一个元素从原数组中剔除
$value=array_pop($arr);


//array_pop相反，提取返回数组头一个元素值，并把头一个元素从原数组中剔除
$value=array_shift($arr);


//让第一个参数数组达到第二个参数数值长度，将第三个参数作为元素添加到第一个参数数组的末尾，索引从
最小没用过数值开始计并返回，原数组不改变
$array1=array_pad($arr,10,"t10");


//返回一个将原数组中多余重复元素剔除掉的新数组，原数组不改变
$array=array_unique($array1);


//将原数组键值打破重新以元素值的阿斯克码值从小到大排序，索引从数字0开始重计
$int=sort($array);


//和sort相反，以元素值阿斯柯码值大小降序重新排序，索引从0重新计
$int=rsort($array);


//返回将第一个参数数组中每一个元素值依次作为键值付给参数二数组的数组，两数组长度必须一致，原数组
不改变
$array=array_combine(array("a","b","c","d","e"),$arr);


//将两个数组合并并返回原数组不变
$array=array_merge($arr,array("a","b","c"));
10


//在第一个参数数组中从第二个参数数值位置开始截取到第三个参数数值长度的数组键值+元素并返回，数组
第一个元素位置从0计
$array=array_slice($arr,2,1);


//截取功能和array_slice()一样，只是将截取部分在原数组中剔除
$array=array_splice($arr,2,1);


//将第一个参数作为第一个元素，每次自增参数三的值，自增后再作为一个元素存在数组中，直到值达到参数
二的值存到数组中为止并返回这个数组
//参数一，参数二可以是数字，可以是单个字符，单字符就按阿斯柯码值算，第三个参数不写默认每次自增1
$array=range(3,9,2);


//将原数组元素与对应键值的对应关系重新随机排列返回真假
$bool=shuffle($arr);


//计算数组中所有数值型元素值的和
$int=array_sum(array("a",2,"cssf"));


//把一个数组分割为新的数组块，新数组每个元素都是一个数组，新数组每个元素内有几个元素由参数二决定
//第三个参数决定元素的键值是否保留原键值可不写，true为保留，默认false不保留
$array=array_chunk(array("a"=>"a","b","c","d","e","f","g","h"),2,true);




***********************************************
3.4.json数据操作
//json_encode()将数组转换成JSON格式字符串返回
$arr = array('k1'=>'val1','k2'=>'val2','k3'=>array('v3','v4'));
echo $encode_str = json_encode($arr);
//json_decode()将JSON格式字符串转换成能强制转换成数组的对象返回，JSON格式字符串中键与值需要引号
括起来时必须用双引号
$decode_arr = (array)json_decode($encode_str);
var_dump($decode_arr);




$arr1=array("中文","b","c");
$str_arr=json_encode($arr1,JSON_UNESCAPED_UNICODE);
